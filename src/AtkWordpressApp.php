<?php

declare(strict_types=1);

namespace Atk4\AtkWordpress;

use Atk4\AtkWordpress\Helpers\WP;
use Atk4\Ui\App;
use Atk4\Ui\Callback;
use Atk4\Ui\Exception;
use Atk4\Ui\Exception\ExitApplicationError;
use Atk4\Ui\HtmlTemplate;
use Atk4\Ui\JsExpression;
use Atk4\Ui\JsFunction;

class AtkWordpressApp extends App
{
    /**
     * @var string
     */
    public const HOOK_BEFORE_OUTPUT = App::class . '@beforeOutput';

    /**
     * The plugin running this app.
     */
    public ?AtkWordpress $plugin = null;

    /**
     * The html produce by this app.
     */
    public AtkWordpressView $wpHtml;

    public $callExit = true;

    public $alwaysRun = false;

    public $catchExceptions = false; // Managed in plugin

    /**
     * The default directory name of atk template.
     */
    public string $skin = 'semantic-ui';

    public function initWpLayout(AtkWordpressView $view, $layout, $name)
    {
        $this->wpHtml = new AtkWordpressView(['defaultTemplate' => $layout, 'name' => $name]);
        $this->wpHtml->setApp($this);
        $this->wpHtml->invokeInit();
        $this->wpHtml->addClass(['fluid', 'atk-main-container']);

        $this->wpHtml->add($view);

        return $view;
    }

    public function getViewJS($actions): string
    {
        return (new JsExpression('[](jQuery)', [new JsFunction(['$'], $actions)]))->jsRender();
    }

    /**
     * atk view initialisation.
     */
    protected function init(): void
    {
        parent::init();
    }

    public function caughtException(\Throwable $exception): void
    {
        $this->getPlugin()->caughtException($exception); // TODO: Change the autogenerated stub
    }

    public function getPlugin(): AtkWordpress
    {
        return $this->plugin;
    }

    /**
     * Runs app and echo rendered template.
     */
    public function run(): void
    {
        $isExitException = false;
        try {
            $this->runCalled = true;
            $this->hook(self::HOOK_BEFORE_RENDER);
            $this->isRendering = true;

            $this->wpHtml->renderAll();

            $this->wpHtml->template->dangerouslyAppendHtml(
                'Head',
                $this->getTag(
                    'script',
                    [],
                    'const $ = jQuery;' . \PHP_EOL . 'jQuery( document ).ready(function() { ' . \PHP_EOL . $this->wpHtml->getJs() . \PHP_EOL . '});'
                )
            );

            $this->isRendering = false;

            if (isset($_GET[Callback::URL_QUERY_TARGET]) && $this->catchRunawayCallbacks) {
                throw (new Exception('Callback requested, but never reached. You may be missing some arguments in request URL.'))
                    ->addMoreInfo('callback', $_GET[Callback::URL_QUERY_TARGET]);
            }

            $output = $this->wpHtml->template->renderToHtml();
        } catch (ExitApplicationError $exitApplicationError) {
            $output = '';
            $isExitException = true;
        }

        if (!$this->getParentAppPrivateExitCalled()) { // output already sent by terminate()
            if ($this->isJsUrlRequest()) {
                $privateMethod = new \ReflectionMethod(App::class, 'outputResponseJson');
                $privateMethod->setAccessible(true);

                $privateMethod->invoke($this, $output);
            } else {
                $privateMethod = new \ReflectionMethod(App::class, 'outputResponseHtml');
                $privateMethod->setAccessible(true);

                $privateMethod->invoke($this, $output);
            }
        }

        if ($isExitException) {
            $this->callExit();
        }
    }

    private function getParentAppPrivateExitCalled(): bool
    {
        $reflectionProperty = new \ReflectionProperty(App::class, 'exitCalled');
        $reflectionProperty->setAccessible(true);

        return $reflectionProperty->getValue($this);
    }

    /**
     * Output Response to the client.
     *
     * @param array<string, string> $headers
     */
    protected function outputResponse(string $data, array $headers): void
    {
        $reflectionProperty = new \ReflectionProperty(App::class, '_sentHeaders');
        $reflectionProperty->setAccessible(true);

        $sent_headers = $reflectionProperty->getValue($this);

        $this->responseHeaders = $this->normalizeHeaders($this->responseHeaders);
        $headersAll = array_merge($this->responseHeaders, $this->normalizeHeaders($headers));
        unset($headers);
        $headersNew = array_diff_assoc($headersAll, $sent_headers);
        unset($headersAll); // for phpunit

        foreach ($headersNew as $k => $v) {
            $sent_headers[$k] = $v;
        }

        $this->outputResponseUnsafe($data, $headersNew);
    }

    public function url($page = [], $useRequestUrl = false, $extraRequestUrlArgs = []): string
    {
        $this->page = WP::getBaseAdminUrl() . 'admin-ajax';

        /*
        if (!WP::isAdmin()) {

            if (in_array('callback', $page) || in_array('ajax', $page)) {
                $this->page = WP::getBaseAdminUrl() . 'admin-ajax';
                if (is_array($page) && !isset($page[0])) {
                    $page[0] = $this->page;
                }
            }
        }
        */

        $extraRequestUrlArgs['action'] = $this->getPlugin()->getPluginName();
        $extraRequestUrlArgs['atkwp'] = $this->getPlugin()->getActivatedComponent('id');

        if ($this->plugin->getComponentCount() > 0) {
            $extraRequestUrlArgs['atkwp-count'] = $this->getPlugin()->getComponentCount();
        }

        if ($this->getConfig('plugin/use_nounce', false)) {
            $extraRequestUrlArgs['_ajax_nonce'] = WP::createWpNounce($this->getPlugin()->getPluginName());
        }

        return parent::url($page, $useRequestUrl, $extraRequestUrlArgs);
    }

    public function jsUrl($page = [], $useRequestUrl = false, $extraRequestUrlArgs = []): string
    {
        $this->page = WP::getBaseAdminUrl() . 'admin-ajax';
        if (is_array($page) && !isset($page[0])) {
            $page[0] = $this->page;
        }

        $extraRequestUrlArgs = array_merge($extraRequestUrlArgs, ['__atk_json' => 1], $extraRequestUrlArgs);

        return $this->url($page, $useRequestUrl, $extraRequestUrlArgs);
    }

    private function getConfig(string $path, $default = null)
    {
        return $this->getPlugin()->getConfig($path, $default);
    }

    public function loadTemplate($filename): ?HtmlTemplate
    {
        $template = new HtmlTemplate();
        $template->setApp($this);

        foreach ($this->getPlugin()->getTemplateLocation($filename) as $path) {
            try {
                return $template->loadFromFile($path);
            } catch (\Throwable $throwable) {
            }
        }

        throw new Exception('no template found');
    }
}
